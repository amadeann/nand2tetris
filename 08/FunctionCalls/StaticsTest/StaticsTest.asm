// Bootstrap code
@256
D=A
@SP
M=D
// Call function Sys.init
// Push the return address
@$ret.0
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
// Go to Sys.init
@Sys.init
0;JMP
($ret.0)
// Write function Class1.set
// Current function set to: Class1.set
(Class1.set)
// C_PUSH command
// command: C_PUSH, segment: argument, index: 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP command
// command: C_POP, segment: static, index: 0
@SP
M=M-1
A=M
D=M
@R13
M=D
@Class1.0
D=A
@R14
M=D
@R13
D=M
@R14
A=M
M=D
// C_PUSH command
// command: C_PUSH, segment: argument, index: 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP command
// command: C_POP, segment: static, index: 1
@SP
M=M-1
A=M
D=M
@R13
M=D
@Class1.1
D=A
@R14
M=D
@R13
D=M
@R14
A=M
M=D
// C_PUSH command
// command: C_PUSH, segment: constant, index: 0
@0
D=A
@0
A=D+A
D=A
@SP
A=M
M=D
@SP
M=M+1
// Return from Class1.set
@LCL
D=M
@R13
M=D
@5
D=A
@R13
D=M-D
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@1
D=A
@R13
D=M-D
A=D
D=M
@THAT
M=D
@2
D=A
@R13
D=M-D
A=D
D=M
@THIS
M=D
@3
D=A
@R13
D=M-D
A=D
D=M
@ARG
M=D
@4
D=A
@R13
D=M-D
A=D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// Write function Class1.get
// Current function set to: Class1.get
(Class1.get)
// C_PUSH command
// command: C_PUSH, segment: static, index: 0
@Class1.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH command
// command: C_PUSH, segment: static, index: 1
@Class1.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub command
// command: sub
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M-D
@SP
M=M+1
// Return from Class1.get
@LCL
D=M
@R13
M=D
@5
D=A
@R13
D=M-D
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@1
D=A
@R13
D=M-D
A=D
D=M
@THAT
M=D
@2
D=A
@R13
D=M-D
A=D
D=M
@THIS
M=D
@3
D=A
@R13
D=M-D
A=D
D=M
@ARG
M=D
@4
D=A
@R13
D=M-D
A=D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// Write function Class2.set
// Current function set to: Class2.set
(Class2.set)
// C_PUSH command
// command: C_PUSH, segment: argument, index: 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP command
// command: C_POP, segment: static, index: 0
@SP
M=M-1
A=M
D=M
@R13
M=D
@Class2.0
D=A
@R14
M=D
@R13
D=M
@R14
A=M
M=D
// C_PUSH command
// command: C_PUSH, segment: argument, index: 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP command
// command: C_POP, segment: static, index: 1
@SP
M=M-1
A=M
D=M
@R13
M=D
@Class2.1
D=A
@R14
M=D
@R13
D=M
@R14
A=M
M=D
// C_PUSH command
// command: C_PUSH, segment: constant, index: 0
@0
D=A
@0
A=D+A
D=A
@SP
A=M
M=D
@SP
M=M+1
// Return from Class2.set
@LCL
D=M
@R13
M=D
@5
D=A
@R13
D=M-D
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@1
D=A
@R13
D=M-D
A=D
D=M
@THAT
M=D
@2
D=A
@R13
D=M-D
A=D
D=M
@THIS
M=D
@3
D=A
@R13
D=M-D
A=D
D=M
@ARG
M=D
@4
D=A
@R13
D=M-D
A=D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// Write function Class2.get
// Current function set to: Class2.get
(Class2.get)
// C_PUSH command
// command: C_PUSH, segment: static, index: 0
@Class2.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH command
// command: C_PUSH, segment: static, index: 1
@Class2.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub command
// command: sub
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M-D
@SP
M=M+1
// Return from Class2.get
@LCL
D=M
@R13
M=D
@5
D=A
@R13
D=M-D
A=D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@1
D=A
@R13
D=M-D
A=D
D=M
@THAT
M=D
@2
D=A
@R13
D=M-D
A=D
D=M
@THIS
M=D
@3
D=A
@R13
D=M-D
A=D
D=M
@ARG
M=D
@4
D=A
@R13
D=M-D
A=D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// Write function Sys.init
// Current function set to: Sys.init
(Sys.init)
// C_PUSH command
// command: C_PUSH, segment: constant, index: 6
@0
D=A
@6
A=D+A
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH command
// command: C_PUSH, segment: constant, index: 8
@0
D=A
@8
A=D+A
D=A
@SP
A=M
M=D
@SP
M=M+1
// Call function Class1.set
// Push the return address
@Sys.init$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
// Go to Class1.set
@Class1.set
0;JMP
(Sys.init$ret.1)
// C_POP command
// command: C_POP, segment: temp, index: 0
@SP
M=M-1
A=M
D=M
@R13
M=D
@5
D=A
@0
A=D+A
D=A
@R14
M=D
@R13
D=M
@R14
A=M
M=D
// C_PUSH command
// command: C_PUSH, segment: constant, index: 23
@0
D=A
@23
A=D+A
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH command
// command: C_PUSH, segment: constant, index: 15
@0
D=A
@15
A=D+A
D=A
@SP
A=M
M=D
@SP
M=M+1
// Call function Class2.set
// Push the return address
@Sys.init$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
// Go to Class2.set
@Class2.set
0;JMP
(Sys.init$ret.2)
// C_POP command
// command: C_POP, segment: temp, index: 0
@SP
M=M-1
A=M
D=M
@R13
M=D
@5
D=A
@0
A=D+A
D=A
@R14
M=D
@R13
D=M
@R14
A=M
M=D
// Call function Class1.get
// Push the return address
@Sys.init$ret.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
// Go to Class1.get
@Class1.get
0;JMP
(Sys.init$ret.3)
// Call function Class2.get
// Push the return address
@Sys.init$ret.4
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
// Go to Class2.get
@Class2.get
0;JMP
(Sys.init$ret.4)
// Label
(Sys.init$WHILE)
// Goto
@Sys.init$WHILE
0;JMP
