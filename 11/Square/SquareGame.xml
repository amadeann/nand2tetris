<class>
<keyword>class</keyword>
<identifierClassDefined>SquareGame</identifierClassDefined>
<symbol>{</symbol>
<classVarDec>
<keyword>field</keyword>
<identifier>Square</identifier>
<identifierField0Defined>square</identifierField0Defined>
<symbol>;</symbol>
</classVarDec>
<classVarDec>
<keyword>field</keyword>
<keyword>int</keyword>
<identifierField1Defined>direction</identifierField1Defined>
<symbol>;</symbol>
</classVarDec>
<subroutineDec>
<keyword>constructor</keyword>
<identifier>SquareGame</identifier>
<identifierSubroutineDefined>new</identifierSubroutineDefined>
<symbol>(</symbol>
<parameterList>
</parameterList>
<symbol>)</symbol>
<subroutineBody>
<symbol>{</symbol>
<statements>
<letStatement>
<keyword>let</keyword>
<identifierField0Used>square</identifierField0Used>
<symbol>=</symbol>
<expression>
<term>
<identifierClassUsed>Square</identifierClassUsed>
<symbol>.</symbol>
<identifierSubroutineUsed>new</identifierSubroutineUsed>
<symbol>(</symbol>
<expressionList>
<expression>
<term>
<integerConstant>0</integerConstant>
</term>
</expression>
<symbol>,</symbol>
<expression>
<term>
<integerConstant>0</integerConstant>
</term>
</expression>
<symbol>,</symbol>
<expression>
<term>
<integerConstant>30</integerConstant>
</term>
</expression>
</expressionList>
<symbol>)</symbol>
</term>
</expression>
<symbol>;</symbol>
</letStatement>
<letStatement>
<keyword>let</keyword>
<identifierField1Used>direction</identifierField1Used>
<symbol>=</symbol>
<expression>
<term>
<integerConstant>0</integerConstant>
</term>
</expression>
<symbol>;</symbol>
</letStatement>
<returnStatement>
<keyword>return</keyword>
<expression>
<term>
<keyword>this</keyword>
</term>
</expression>
<symbol>;</symbol>
</returnStatement>
</statements>
<symbol>}</symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword>method</keyword>
<keyword>void</keyword>
<identifierSubroutineDefined>dispose</identifierSubroutineDefined>
<symbol>(</symbol>
<parameterList>
</parameterList>
<symbol>)</symbol>
<subroutineBody>
<symbol>{</symbol>
<statements>
<doStatement>
<keyword>do</keyword>
<identifierField0Used>square</identifierField0Used>
<symbol>.</symbol>
<identifierSubroutineUsed>dispose</identifierSubroutineUsed>
<symbol>(</symbol>
<expressionList>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
<doStatement>
<keyword>do</keyword>
<identifierClassUsed>Memory</identifierClassUsed>
<symbol>.</symbol>
<identifierSubroutineUsed>deAlloc</identifierSubroutineUsed>
<symbol>(</symbol>
<expressionList>
<expression>
<term>
<keyword>this</keyword>
</term>
</expression>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
<returnStatement>
<keyword>return</keyword>
<symbol>;</symbol>
</returnStatement>
</statements>
<symbol>}</symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword>method</keyword>
<keyword>void</keyword>
<identifierSubroutineDefined>moveSquare</identifierSubroutineDefined>
<symbol>(</symbol>
<parameterList>
</parameterList>
<symbol>)</symbol>
<subroutineBody>
<symbol>{</symbol>
<statements>
<ifStatement>
<keyword>if</keyword>
<symbol>(</symbol>
<expression>
<term>
<identifierField1Used>direction</identifierField1Used>
</term>
<symbol>=</symbol>
<term>
<integerConstant>1</integerConstant>
</term>
</expression>
<symbol>)</symbol>
<symbol>{</symbol>
<statements>
<doStatement>
<keyword>do</keyword>
<identifierField0Used>square</identifierField0Used>
<symbol>.</symbol>
<identifierSubroutineUsed>moveUp</identifierSubroutineUsed>
<symbol>(</symbol>
<expressionList>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
</statements>
<symbol>}</symbol>
</ifStatement>
<ifStatement>
<keyword>if</keyword>
<symbol>(</symbol>
<expression>
<term>
<identifierField1Used>direction</identifierField1Used>
</term>
<symbol>=</symbol>
<term>
<integerConstant>2</integerConstant>
</term>
</expression>
<symbol>)</symbol>
<symbol>{</symbol>
<statements>
<doStatement>
<keyword>do</keyword>
<identifierField0Used>square</identifierField0Used>
<symbol>.</symbol>
<identifierSubroutineUsed>moveDown</identifierSubroutineUsed>
<symbol>(</symbol>
<expressionList>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
</statements>
<symbol>}</symbol>
</ifStatement>
<ifStatement>
<keyword>if</keyword>
<symbol>(</symbol>
<expression>
<term>
<identifierField1Used>direction</identifierField1Used>
</term>
<symbol>=</symbol>
<term>
<integerConstant>3</integerConstant>
</term>
</expression>
<symbol>)</symbol>
<symbol>{</symbol>
<statements>
<doStatement>
<keyword>do</keyword>
<identifierField0Used>square</identifierField0Used>
<symbol>.</symbol>
<identifierSubroutineUsed>moveLeft</identifierSubroutineUsed>
<symbol>(</symbol>
<expressionList>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
</statements>
<symbol>}</symbol>
</ifStatement>
<ifStatement>
<keyword>if</keyword>
<symbol>(</symbol>
<expression>
<term>
<identifierField1Used>direction</identifierField1Used>
</term>
<symbol>=</symbol>
<term>
<integerConstant>4</integerConstant>
</term>
</expression>
<symbol>)</symbol>
<symbol>{</symbol>
<statements>
<doStatement>
<keyword>do</keyword>
<identifierField0Used>square</identifierField0Used>
<symbol>.</symbol>
<identifierSubroutineUsed>moveRight</identifierSubroutineUsed>
<symbol>(</symbol>
<expressionList>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
</statements>
<symbol>}</symbol>
</ifStatement>
<doStatement>
<keyword>do</keyword>
<identifierClassUsed>Sys</identifierClassUsed>
<symbol>.</symbol>
<identifierSubroutineUsed>wait</identifierSubroutineUsed>
<symbol>(</symbol>
<expressionList>
<expression>
<term>
<integerConstant>5</integerConstant>
</term>
</expression>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
<returnStatement>
<keyword>return</keyword>
<symbol>;</symbol>
</returnStatement>
</statements>
<symbol>}</symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword>method</keyword>
<keyword>void</keyword>
<identifierSubroutineDefined>run</identifierSubroutineDefined>
<symbol>(</symbol>
<parameterList>
</parameterList>
<symbol>)</symbol>
<subroutineBody>
<symbol>{</symbol>
<varDec>
<keyword>var</keyword>
<keyword>char</keyword>
<identifierVar0Defined>key</identifierVar0Defined>
<symbol>;</symbol>
</varDec>
<varDec>
<keyword>var</keyword>
<keyword>boolean</keyword>
<identifierVar1Defined>exit</identifierVar1Defined>
<symbol>;</symbol>
</varDec>
<statements>
<letStatement>
<keyword>let</keyword>
<identifierVar1Used>exit</identifierVar1Used>
<symbol>=</symbol>
<expression>
<term>
<keyword>false</keyword>
</term>
</expression>
<symbol>;</symbol>
</letStatement>
<whileStatement>
<keyword>while</keyword>
<symbol>(</symbol>
<expression>
<term>
<symbol>~</symbol>
<term>
<identifierVar1Used>exit</identifierVar1Used>
</term>
</term>
</expression>
<symbol>)</symbol>
<symbol>{</symbol>
<statements>
<whileStatement>
<keyword>while</keyword>
<symbol>(</symbol>
<expression>
<term>
<identifierVar0Used>key</identifierVar0Used>
</term>
<symbol>=</symbol>
<term>
<integerConstant>0</integerConstant>
</term>
</expression>
<symbol>)</symbol>
<symbol>{</symbol>
<statements>
<letStatement>
<keyword>let</keyword>
<identifierVar0Used>key</identifierVar0Used>
<symbol>=</symbol>
<expression>
<term>
<identifierClassUsed>Keyboard</identifierClassUsed>
<symbol>.</symbol>
<identifierSubroutineUsed>keyPressed</identifierSubroutineUsed>
<symbol>(</symbol>
<expressionList>
</expressionList>
<symbol>)</symbol>
</term>
</expression>
<symbol>;</symbol>
</letStatement>
<doStatement>
<keyword>do</keyword>
<identifierSubroutineUsed>moveSquare</identifierSubroutineUsed>
<symbol>(</symbol>
<expressionList>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
</statements>
<symbol>}</symbol>
</whileStatement>
<ifStatement>
<keyword>if</keyword>
<symbol>(</symbol>
<expression>
<term>
<identifierVar0Used>key</identifierVar0Used>
</term>
<symbol>=</symbol>
<term>
<integerConstant>81</integerConstant>
</term>
</expression>
<symbol>)</symbol>
<symbol>{</symbol>
<statements>
<letStatement>
<keyword>let</keyword>
<identifierVar1Used>exit</identifierVar1Used>
<symbol>=</symbol>
<expression>
<term>
<keyword>true</keyword>
</term>
</expression>
<symbol>;</symbol>
</letStatement>
</statements>
<symbol>}</symbol>
</ifStatement>
<ifStatement>
<keyword>if</keyword>
<symbol>(</symbol>
<expression>
<term>
<identifierVar0Used>key</identifierVar0Used>
</term>
<symbol>=</symbol>
<term>
<integerConstant>90</integerConstant>
</term>
</expression>
<symbol>)</symbol>
<symbol>{</symbol>
<statements>
<doStatement>
<keyword>do</keyword>
<identifierField0Used>square</identifierField0Used>
<symbol>.</symbol>
<identifierSubroutineUsed>decSize</identifierSubroutineUsed>
<symbol>(</symbol>
<expressionList>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
</statements>
<symbol>}</symbol>
</ifStatement>
<ifStatement>
<keyword>if</keyword>
<symbol>(</symbol>
<expression>
<term>
<identifierVar0Used>key</identifierVar0Used>
</term>
<symbol>=</symbol>
<term>
<integerConstant>88</integerConstant>
</term>
</expression>
<symbol>)</symbol>
<symbol>{</symbol>
<statements>
<doStatement>
<keyword>do</keyword>
<identifierField0Used>square</identifierField0Used>
<symbol>.</symbol>
<identifierSubroutineUsed>incSize</identifierSubroutineUsed>
<symbol>(</symbol>
<expressionList>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
</statements>
<symbol>}</symbol>
</ifStatement>
<ifStatement>
<keyword>if</keyword>
<symbol>(</symbol>
<expression>
<term>
<identifierVar0Used>key</identifierVar0Used>
</term>
<symbol>=</symbol>
<term>
<integerConstant>131</integerConstant>
</term>
</expression>
<symbol>)</symbol>
<symbol>{</symbol>
<statements>
<letStatement>
<keyword>let</keyword>
<identifierField1Used>direction</identifierField1Used>
<symbol>=</symbol>
<expression>
<term>
<integerConstant>1</integerConstant>
</term>
</expression>
<symbol>;</symbol>
</letStatement>
</statements>
<symbol>}</symbol>
</ifStatement>
<ifStatement>
<keyword>if</keyword>
<symbol>(</symbol>
<expression>
<term>
<identifierVar0Used>key</identifierVar0Used>
</term>
<symbol>=</symbol>
<term>
<integerConstant>133</integerConstant>
</term>
</expression>
<symbol>)</symbol>
<symbol>{</symbol>
<statements>
<letStatement>
<keyword>let</keyword>
<identifierField1Used>direction</identifierField1Used>
<symbol>=</symbol>
<expression>
<term>
<integerConstant>2</integerConstant>
</term>
</expression>
<symbol>;</symbol>
</letStatement>
</statements>
<symbol>}</symbol>
</ifStatement>
<ifStatement>
<keyword>if</keyword>
<symbol>(</symbol>
<expression>
<term>
<identifierVar0Used>key</identifierVar0Used>
</term>
<symbol>=</symbol>
<term>
<integerConstant>130</integerConstant>
</term>
</expression>
<symbol>)</symbol>
<symbol>{</symbol>
<statements>
<letStatement>
<keyword>let</keyword>
<identifierField1Used>direction</identifierField1Used>
<symbol>=</symbol>
<expression>
<term>
<integerConstant>3</integerConstant>
</term>
</expression>
<symbol>;</symbol>
</letStatement>
</statements>
<symbol>}</symbol>
</ifStatement>
<ifStatement>
<keyword>if</keyword>
<symbol>(</symbol>
<expression>
<term>
<identifierVar0Used>key</identifierVar0Used>
</term>
<symbol>=</symbol>
<term>
<integerConstant>132</integerConstant>
</term>
</expression>
<symbol>)</symbol>
<symbol>{</symbol>
<statements>
<letStatement>
<keyword>let</keyword>
<identifierField1Used>direction</identifierField1Used>
<symbol>=</symbol>
<expression>
<term>
<integerConstant>4</integerConstant>
</term>
</expression>
<symbol>;</symbol>
</letStatement>
</statements>
<symbol>}</symbol>
</ifStatement>
<whileStatement>
<keyword>while</keyword>
<symbol>(</symbol>
<expression>
<term>
<symbol>~</symbol>
<term>
<symbol>(</symbol>
<expression>
<term>
<identifierVar0Used>key</identifierVar0Used>
</term>
<symbol>=</symbol>
<term>
<integerConstant>0</integerConstant>
</term>
</expression>
<symbol>)</symbol>
</term>
</term>
</expression>
<symbol>)</symbol>
<symbol>{</symbol>
<statements>
<letStatement>
<keyword>let</keyword>
<identifierVar0Used>key</identifierVar0Used>
<symbol>=</symbol>
<expression>
<term>
<identifierClassUsed>Keyboard</identifierClassUsed>
<symbol>.</symbol>
<identifierSubroutineUsed>keyPressed</identifierSubroutineUsed>
<symbol>(</symbol>
<expressionList>
</expressionList>
<symbol>)</symbol>
</term>
</expression>
<symbol>;</symbol>
</letStatement>
<doStatement>
<keyword>do</keyword>
<identifierSubroutineUsed>moveSquare</identifierSubroutineUsed>
<symbol>(</symbol>
<expressionList>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
</statements>
<symbol>}</symbol>
</whileStatement>
</statements>
<symbol>}</symbol>
</whileStatement>
<returnStatement>
<keyword>return</keyword>
<symbol>;</symbol>
</returnStatement>
</statements>
<symbol>}</symbol>
</subroutineBody>
</subroutineDec>
<symbol>}</symbol>
</class>
